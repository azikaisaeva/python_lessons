# === Урок 16: Расширенные возможности функций в Python ===

#   Аргументы функций:
# - позиционные аргументы: def f(x, y)
# - аргументы по умолчанию: def f(x=10)
# - переменное число позиционных аргументов: *args
# - переменное число именованных аргументов: **kwargs


#   Примеры аргументов по умолчанию:
# def greet(name="Гость"):
#     print(f"Привет, {name}!")
#
#
# greet("Анна")  # Привет, Анна
# greet()         # Привет, Гость


#   Пример *args: любое количество позиционных аргументов
# def multiply_all(*args):
#     result = 1
#     for number in args:
#         result *= number
#     return result
#
#
# print(multiply_all(2, 3, 4))  # 24


# #   Пример **kwargs: любое количество именованных аргументов
# def show_info(**kwargs):
#     for key, value in kwargs.items():
#         print(f"{key}: {value}")
#
#
# show_info(name="Иван", age=30, city="Москва")

#   Функции как объекты (их можно передавать в другие функции)

#   Вложенные функции (одна функция внутри другой)

#   Лямбда-функции — короткий способ записать функцию:
# Пример:
# double = lambda x: x * 2
# print(double(5))  # 10

#   Функции высшего порядка — принимают функции как аргументы или возвращают функции

#   Область видимости переменных: глобальные и локальные, ключевые слова global и nonlocal

# Пример глобальной переменной:
# x = 5
#
#
# def change_global():
#     global x
#     x = 10
#
#
# change_global()
# print(x)  # 10


# Пример nonlocal:
# def outer():
#     y = 3
#
#     def inner():
#         nonlocal y
#         y += 2
#         print("Внутри inner:", y)
#     inner()
#     print("Внутри outer:", y)
#
#
# outer()

#   Декораторы:
# Декораторы — это функции, которые принимают другую функцию и возвращают новую функцию с дополнительным поведением.
# Обычно используются для логирования, проверки прав доступа, измерения времени выполнения и др.


# Пример простого декоратора:
# def my_decorator(func):
#     def wrapper():
#         print("До выполнения функции")
#         func()
#         print("После выполнения функции")
#     return wrapper
#
#
# @my_decorator
# def say_hi():
#     print("Привет!")


# say_hi()
# Вывод:
# До выполнения функции
# Привет!
# После выполнения функции


# # Декоратор с аргументами:
# def logger(func):
#     def wrapper(*args, **kwargs):
#         print(f"Вызов функции {func.__name__} с аргументами: {args}, {kwargs}")
#         return func(*args, **kwargs)
#     return wrapper
#
#
# @logger
# def add(a, b):
#     return a + b
#
#
# print(add(2, 3))

# --- Ознакомительные задачи (10) ---

# 1. Напиши функцию, которая принимает любое количество чисел и возвращает их произведение.
# def multiply_all(*args):
#     result = 1
#     for number in args:
#         result *= number
#     return result
#
# print(multiply_all(2, 5, 7, 9, 6))

# 2. Напиши функцию с именованными аргументами name и age, которая выводит: "Имя: ..., Возраст: ...".
# def show_data(**kwargs):
#     for key, value in kwargs.items():
#         print(f"Имя: {key}: Возраст: {value}")
#
# show_data(name="Kate", age=25)

# 3. Напиши функцию, которая принимает список и возвращает сумму только положительных чисел.
# def positive_numbers(*args):
#     result = 0
#     for number in args:
#         if number > 0:
#             result += number
#     return result
# print(positive_numbers(-2, 5, 7, -1))

# 4. Напиши лямбда-функцию, которая принимает число и возвращает его куб.
# cube_number = lambda x: x * 3
# print(cube_number(3))

# 5. Напиши функцию, которая возвращает другую функцию, которая возводит число в квадрат.


# # 6. Напиши функцию, которая использует global для изменения глобальной переменной.
# def change_global

# 7. Напиши функцию, которая принимает **kwargs и возвращает их ключи в списке.
# def get_keys(**kwargs):
#     return list(kwargs.keys())
#
# result = get_keys(name="Aziza", age=27)
# print(result)

# 8. Напиши функцию, которая считает сумму всех чисел в списке с помощью вложенной функции.
# def sum_numbers(numbers):
#     def inner_sum(nums):
#         total = 0
#         total += nums
#         return total
#
#     return inner_sum(nums)
# list = [1, 2, 3, 4, 5]
# result = sum_numbers(list)
# print(result)     #Выводит ошибку
#
# 9. Напиши функцию, принимающую другую функцию и число, и возвращающую результат.
# def count_sum(num):
#     def inner_sum(n):
#         total = 0
#         for nums in n:
#             total += nums
#         return total
#     return inner_sum(num)
# my_list = [1, 2, 3, 4, 5]
# result = count_sum(my_list)
# print(result)



# 10. Напиши функцию, использующую nonlocal для изменения переменной во вложенной функции.
# def counter(count):
#     count = 0
#     def implement():
#         nonlocal count
#         count += 1
#         return count
#     return implement()

# --- Домашнее задание (40 задач) ---

# --- Дополнительные задачи по декораторам (10) ---

# 41. Напиши декоратор, который выводит 'Начало выполнения' и 'Конец выполнения' перед и после вызова функции.
# Пример: задекорируй функцию print_name(), которая печатает 'Алексей'.

# 42. Напиши декоратор, который логирует аргументы и результат функции.
# Пример: задекорируй функцию multiply(a=3, b=4), которая возвращает произведение.

# 43. Напиши декоратор, который запрещает вызов функции без аргументов.
# Пример: функция divide(a, b). Если не переданы аргументы — выводится сообщение об ошибке.

# 44. Напиши декоратор, который считает и выводит количество вызовов функции.
# Пример: задекорируй функцию hello(), вызывай её 3 раза.

# 45. Напиши декоратор, который ограничивает выполнение функции максимум 2 раза.
# Пример: задекорируй функцию greet(), которая просто печатает приветствие.

# 46. Напиши декоратор, который проверяет тип аргументов функции и вызывает её только если все аргументы — числа.
# Пример: функция add(a, b), вызов add(2, 'a') должен выводить сообщение об ошибке.

# 47. Напиши декоратор, который измеряет и выводит время выполнения функции.
# Пример: задекорируй функцию wait(), которая вызывает time.sleep(1).

# 48. Напиши декоратор, который преобразует результат функции в строку.
# Пример: функция get_number() возвращает число 42, декоратор делает return '42'.

# 49. Напиши декоратор, который к каждому выводу из функции добавляет '✔'.
# Пример: функция print_msg() выводит 'Успешно'. С декоратором — 'Успешно✔'.

# 50. Напиши универсальный декоратор, который можно применить к любой функции и он будет выводить
# её имя и время запуска.
# Пример: задекорируй любую функцию, например def say_hello().

# 1. Функция, принимающая любое количество чисел и возвращающая максимум.
# def max_num(*args):
#     if not args:
#         return None
#     return max(args)
# print(max_num(1, 4, 7, 29))

# 2. Функция, принимающая **kwargs и выводящая пары ключ: значение.
# def find_values(**kwargs):
#     for key, value in kwargs.items():
#         return list(kwargs.items())
# result = find_values(name="Aziza", age=27)
# print(result)

# 3. Функция, возвращающая список квадратов чисел из *args.
# def square(*args):
#     return [x ** 2 for x in args]
# result = square(3, 6, 7)
# print(result)

# 4. Функция, возвращающая True, если в *args есть хотя бы одно чётное число.
# def return_even_number(*args):
#     for num in args:
#         if num % 2 == 0:
#             return True
#     return False
# print(return_even_number(5, 7, 9, 22))

# 5. Функция, принимающая строку и символ, возвращающая количество вхождений символа.
# def strip_and_char(**kwargs):
#     def inner_fun()

# 6. Функция, возвращающая словарь: символ — количество его вхождений в строке.
# 7. Функция, принимающая список и возвращающая только уникальные значения.
# 8. Функция, которая принимает список строк и возвращает их объединение.
# 9. Функция, возвращающая True, если слово палиндром.
# def word_palindrome(word):
#     return word == word[::-1]
# print(word_palindrome("level"))
# print(word_palindrome("tomato"))
# 10. Функция, проверяющая, все ли слова в списке начинаются с заглавной буквы.
# def capital_letters(word):
    

# 11. Функция, возвращающая список имён из **kwargs, где ключи — 'name1', 'name2', и т.д.
# 12. Лямбда-функция для получения остатка от деления числа на 3.
# 13. Функция, которая принимает функцию и список, применяет функцию ко всем элементам и возвращает новый список.
# 14. Функция, возвращающая другую функцию, добавляющую префикс к строке.
# 15. Функция, которая подсчитывает общее количество символов в строках списка.
# 16. Функция, возвращающая сумму всех значений словаря.
# 17. Функция, которая преобразует все значения словаря в строки.
# 18. Функция, сортирующая словарь по длине ключей.
# 19. Функция, принимающая список чисел и возвращающая их в виде строки через точку с запятой.
# 20. Функция, считающая количество чисел больше 10 в *args.
# 21. Функция, возвращающая True, если длина всех строк в списке больше 3.
# 22. Функция, объединяющая списки, переданные через *args.
# 23. Функция, возвращающая минимальное значение в **kwargs.
# 24. Функция, проверяющая, есть ли в списке строки, содержащие подстроку 'test'.
# 25. Функция, применяющая функцию к каждому значению словаря.
# 26. Функция, возвращающая количество параметров в **kwargs.
# 27. Функция, принимающая список чисел и возвращающая их факториалы.
# 28. Функция, которая возвращает True, если хотя бы одно значение в словаре больше 100.
# 29. Функция, объединяющая строки из *args через пробел.
# 30. Функция, возвращающая True, если в **kwargs есть ключ 'email'.
# 31. Функция, возвращающая количество цифр в строке.
# 32. Функция, проверяющая, входит ли строка в список (игнорируя регистр).
# 33. Функция, возвращающая True, если все значения в словаре уникальны.
# 34. Функция, принимающая список кортежей и возвращающая сумму второго элементов.
# 35. Функция, выводящая имя и возраст в формате: "Имя: ..., Возраст: ..." с помощью f-строки.
# 36. Функция, создающая и возвращающая словарь из списка ключей и списка значений.
# 37. Функция, принимающая список слов и возвращающая количество слов длиной больше 5.
# 38. Функция, проверяющая, начинается ли каждая строка в списке с заглавной.
# 39. Функция, возвращающая True, если сумма всех чисел *args кратна 10.
# 40. Функция, принимающая строку и возвращающая словарь с частотой каждого слова.
